/* automatically generated by rust-bindgen 0.71.1 */

pub type TypeDeclaration = KleinTypeDeclaration;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct KleinForLoop {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct KleinTypeList {
    _unused: [u8; 0],
}
pub const KleinTokenType_KLEIN_TOKEN_TYPE_STRING: KleinTokenType = 0;
pub type KleinTokenType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union KleinTypeLiteralData {
    pub identifier: *mut ::std::os::raw::c_char,
    pub function: *mut KleinFunction,
    pub typeDeclaration: *mut KleinTypeDeclaration,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of KleinTypeLiteralData"][::std::mem::size_of::<KleinTypeLiteralData>() - 8usize];
    ["Alignment of KleinTypeLiteralData"][::std::mem::align_of::<KleinTypeLiteralData>() - 8usize];
    ["Offset of field: KleinTypeLiteralData::identifier"][::std::mem::offset_of!(KleinTypeLiteralData, identifier) - 0usize];
    ["Offset of field: KleinTypeLiteralData::function"][::std::mem::offset_of!(KleinTypeLiteralData, function) - 0usize];
    ["Offset of field: KleinTypeLiteralData::typeDeclaration"][::std::mem::offset_of!(KleinTypeLiteralData, typeDeclaration) - 0usize];
};
pub const KleinTypeLiteralType_TYPE_LITERAL_FUNCTION: KleinTypeLiteralType = 0;
pub const KleinTypeLiteralType_TYPE_LITERAL_IDENTIFIER: KleinTypeLiteralType = 1;
pub const KleinTypeLiteralType_TYPE_LITERAL_TYPE_DECLARATION: KleinTypeLiteralType = 2;
pub type KleinTypeLiteralType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct KleinTypeLiteral {
    pub data: KleinTypeLiteralData,
    pub type_: KleinTypeLiteralType,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of KleinTypeLiteral"][::std::mem::size_of::<KleinTypeLiteral>() - 16usize];
    ["Alignment of KleinTypeLiteral"][::std::mem::align_of::<KleinTypeLiteral>() - 8usize];
    ["Offset of field: KleinTypeLiteral::data"][::std::mem::offset_of!(KleinTypeLiteral, data) - 0usize];
    ["Offset of field: KleinTypeLiteral::type_"][::std::mem::offset_of!(KleinTypeLiteral, type_) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union KleinTypeData {
    #[doc = " A union type, also known as an arithmetic sum type. This represents\n a choice between multiple types."]
    pub typeUnion: *mut KleinTypeList,
    #[doc = " A single, literal type, such as a function, identifier, etc."]
    pub literal: KleinTypeLiteral,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of KleinTypeData"][::std::mem::size_of::<KleinTypeData>() - 16usize];
    ["Alignment of KleinTypeData"][::std::mem::align_of::<KleinTypeData>() - 8usize];
    ["Offset of field: KleinTypeData::typeUnion"][::std::mem::offset_of!(KleinTypeData, typeUnion) - 0usize];
    ["Offset of field: KleinTypeData::literal"][::std::mem::offset_of!(KleinTypeData, literal) - 0usize];
};
pub const KleinTypeType_TYPE_UNION: KleinTypeType = 0;
pub const KleinTypeType_TYPE_LITERAL: KleinTypeType = 1;
pub type KleinTypeType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct KleinType {
    pub data: KleinTypeData,
    pub type_: KleinTypeType,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of KleinType"][::std::mem::size_of::<KleinType>() - 24usize];
    ["Alignment of KleinType"][::std::mem::align_of::<KleinType>() - 8usize];
    ["Offset of field: KleinType::data"][::std::mem::offset_of!(KleinType, data) - 0usize];
    ["Offset of field: KleinType::type_"][::std::mem::offset_of!(KleinType, type_) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct KleinBlock {
    pub statements: *mut KleinStatementList,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of KleinBlock"][::std::mem::size_of::<KleinBlock>() - 8usize];
    ["Alignment of KleinBlock"][::std::mem::align_of::<KleinBlock>() - 8usize];
    ["Offset of field: KleinBlock::statements"][::std::mem::offset_of!(KleinBlock, statements) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct KleinToken {
    pub type_: KleinTokenType,
    pub value: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of KleinToken"][::std::mem::size_of::<KleinToken>() - 16usize];
    ["Alignment of KleinToken"][::std::mem::align_of::<KleinToken>() - 8usize];
    ["Offset of field: KleinToken::type_"][::std::mem::offset_of!(KleinToken, type_) - 0usize];
    ["Offset of field: KleinToken::value"][::std::mem::offset_of!(KleinToken, value) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct KleinTokenList {
    pub data: *mut KleinToken,
    pub length: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of KleinTokenList"][::std::mem::size_of::<KleinTokenList>() - 16usize];
    ["Alignment of KleinTokenList"][::std::mem::align_of::<KleinTokenList>() - 8usize];
    ["Offset of field: KleinTokenList::data"][::std::mem::offset_of!(KleinTokenList, data) - 0usize];
    ["Offset of field: KleinTokenList::length"][::std::mem::offset_of!(KleinTokenList, length) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct KleinResult {
    pub errorMessage: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of KleinResult"][::std::mem::size_of::<KleinResult>() - 8usize];
    ["Alignment of KleinResult"][::std::mem::align_of::<KleinResult>() - 8usize];
    ["Offset of field: KleinResult::errorMessage"][::std::mem::offset_of!(KleinResult, errorMessage) - 0usize];
};
pub const KleinExpressionType_EXPRESSION_BOOLEAN: KleinExpressionType = 0;
pub const KleinExpressionType_EXPRESSION_BINARY: KleinExpressionType = 1;
pub const KleinExpressionType_EXPRESSION_FUNCTION: KleinExpressionType = 2;
pub const KleinExpressionType_EXPRESSION_BLOCK: KleinExpressionType = 3;
pub const KleinExpressionType_EXPRESSION_UNARY: KleinExpressionType = 4;
pub const KleinExpressionType_EXPRESSION_IDENTIFIER: KleinExpressionType = 5;
pub const KleinExpressionType_EXPRESSION_BUILTIN_FUNCTION: KleinExpressionType = 6;
pub const KleinExpressionType_EXPRESSION_OBJECT: KleinExpressionType = 7;
pub const KleinExpressionType_EXPRESSION_FOR_LOOP: KleinExpressionType = 8;
pub const KleinExpressionType_EXPRESSION_WHILE_LOOP: KleinExpressionType = 9;
pub const KleinExpressionType_EXPRESSION_STRING: KleinExpressionType = 10;
pub const KleinExpressionType_EXPRESSION_NUMBER: KleinExpressionType = 11;
pub const KleinExpressionType_EXPRESSION_LIST: KleinExpressionType = 12;
pub const KleinExpressionType_EXPRESSION_IF: KleinExpressionType = 13;
pub type KleinExpressionType = ::std::os::raw::c_uint;
#[doc = " A parameter in a function expression."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct KleinParameter {
    #[doc = " The name of the parameter."]
    pub name: *mut ::std::os::raw::c_char,
    #[doc = " The type of the parameter."]
    pub type_: KleinType,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of KleinParameter"][::std::mem::size_of::<KleinParameter>() - 32usize];
    ["Alignment of KleinParameter"][::std::mem::align_of::<KleinParameter>() - 8usize];
    ["Offset of field: KleinParameter::name"][::std::mem::offset_of!(KleinParameter, name) - 0usize];
    ["Offset of field: KleinParameter::type_"][::std::mem::offset_of!(KleinParameter, type_) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct KleinParameterList {
    pub data: *mut KleinParameter,
    pub length: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of KleinParameterList"][::std::mem::size_of::<KleinParameterList>() - 16usize];
    ["Alignment of KleinParameterList"][::std::mem::align_of::<KleinParameterList>() - 8usize];
    ["Offset of field: KleinParameterList::data"][::std::mem::offset_of!(KleinParameterList, data) - 0usize];
    ["Offset of field: KleinParameterList::length"][::std::mem::offset_of!(KleinParameterList, length) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct KleinFunction {
    pub parameters: KleinParameterList,
    #[doc = " The return type of the function."]
    pub returnType: KleinType,
    #[doc = " The body of the function."]
    pub body: KleinBlock,
    pub thisObject: *mut KleinExpression,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of KleinFunction"][::std::mem::size_of::<KleinFunction>() - 56usize];
    ["Alignment of KleinFunction"][::std::mem::align_of::<KleinFunction>() - 8usize];
    ["Offset of field: KleinFunction::parameters"][::std::mem::offset_of!(KleinFunction, parameters) - 0usize];
    ["Offset of field: KleinFunction::returnType"][::std::mem::offset_of!(KleinFunction, returnType) - 16usize];
    ["Offset of field: KleinFunction::body"][::std::mem::offset_of!(KleinFunction, body) - 40usize];
    ["Offset of field: KleinFunction::thisObject"][::std::mem::offset_of!(KleinFunction, thisObject) - 48usize];
};
pub const KleinBinaryOperation_BINARY_OPERATION_ASSIGN: KleinBinaryOperation = 0;
pub const KleinBinaryOperation_BINARY_OPERATION_PLUS: KleinBinaryOperation = 1;
pub const KleinBinaryOperation_BINARY_OPERATION_MINUS: KleinBinaryOperation = 2;
pub const KleinBinaryOperation_BINARY_OPERATION_TIMES: KleinBinaryOperation = 3;
pub const KleinBinaryOperation_BINARY_OPERATION_DIVIDE: KleinBinaryOperation = 4;
pub const KleinBinaryOperation_BINARY_OPERATION_POWER: KleinBinaryOperation = 5;
pub const KleinBinaryOperation_BINARY_OPERATION_AND: KleinBinaryOperation = 6;
pub const KleinBinaryOperation_BINARY_OPERATION_OR: KleinBinaryOperation = 7;
pub const KleinBinaryOperation_BINARY_OPERATION_DOT: KleinBinaryOperation = 8;
pub const KleinBinaryOperation_BINARY_OPERATION_LESS_THAN: KleinBinaryOperation = 9;
pub const KleinBinaryOperation_BINARY_OPERATION_GREATER_THAN: KleinBinaryOperation = 10;
pub const KleinBinaryOperation_BINARY_OPERATION_LESS_THAN_OR_EQUAL_TO: KleinBinaryOperation = 11;
pub const KleinBinaryOperation_BINARY_OPERATION_GREATER_THAN_OR_EQUAL_TO: KleinBinaryOperation = 12;
pub const KleinBinaryOperation_BINARY_OPERATION_EQUAL: KleinBinaryOperation = 13;
pub type KleinBinaryOperation = ::std::os::raw::c_uint;
pub const KleinUnaryOperationType_UNARY_OPERATION_NOT: KleinUnaryOperationType = 0;
pub const KleinUnaryOperationType_UNARY_OPERATION_FUNCTION_CALL: KleinUnaryOperationType = 1;
pub const KleinUnaryOperationType_UNARY_OPERATION_INDEX: KleinUnaryOperationType = 2;
pub type KleinUnaryOperationType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct KleinTypeDeclaration {
    pub fields: KleinParameterList,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of KleinTypeDeclaration"][::std::mem::size_of::<KleinTypeDeclaration>() - 16usize];
    ["Alignment of KleinTypeDeclaration"][::std::mem::align_of::<KleinTypeDeclaration>() - 8usize];
    ["Offset of field: KleinTypeDeclaration::fields"][::std::mem::offset_of!(KleinTypeDeclaration, fields) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union KleinExpressionData {
    pub number: f64,
    pub string: *mut ::std::os::raw::c_char,
    pub boolean: ::std::os::raw::c_uint,
    pub identifier: *mut ::std::os::raw::c_char,
    pub block: *mut KleinBlock,
    pub function: KleinFunction,
    pub unary: *mut KleinUnaryExpression,
    pub binary: *mut KleinBinaryExpression,
    pub object: *mut KleinObject,
    pub forLoop: *mut KleinForLoop,
    pub whileLoop: *mut KleinWhileLoop,
    pub list: *mut KleinExpressionList,
    pub ifExpression: *mut KleinIfExpressionList,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of KleinExpressionData"][::std::mem::size_of::<KleinExpressionData>() - 56usize];
    ["Alignment of KleinExpressionData"][::std::mem::align_of::<KleinExpressionData>() - 8usize];
    ["Offset of field: KleinExpressionData::number"][::std::mem::offset_of!(KleinExpressionData, number) - 0usize];
    ["Offset of field: KleinExpressionData::string"][::std::mem::offset_of!(KleinExpressionData, string) - 0usize];
    ["Offset of field: KleinExpressionData::boolean"][::std::mem::offset_of!(KleinExpressionData, boolean) - 0usize];
    ["Offset of field: KleinExpressionData::identifier"][::std::mem::offset_of!(KleinExpressionData, identifier) - 0usize];
    ["Offset of field: KleinExpressionData::block"][::std::mem::offset_of!(KleinExpressionData, block) - 0usize];
    ["Offset of field: KleinExpressionData::function"][::std::mem::offset_of!(KleinExpressionData, function) - 0usize];
    ["Offset of field: KleinExpressionData::unary"][::std::mem::offset_of!(KleinExpressionData, unary) - 0usize];
    ["Offset of field: KleinExpressionData::binary"][::std::mem::offset_of!(KleinExpressionData, binary) - 0usize];
    ["Offset of field: KleinExpressionData::object"][::std::mem::offset_of!(KleinExpressionData, object) - 0usize];
    ["Offset of field: KleinExpressionData::forLoop"][::std::mem::offset_of!(KleinExpressionData, forLoop) - 0usize];
    ["Offset of field: KleinExpressionData::whileLoop"][::std::mem::offset_of!(KleinExpressionData, whileLoop) - 0usize];
    ["Offset of field: KleinExpressionData::list"][::std::mem::offset_of!(KleinExpressionData, list) - 0usize];
    ["Offset of field: KleinExpressionData::ifExpression"][::std::mem::offset_of!(KleinExpressionData, ifExpression) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct KleinExpression {
    pub type_: KleinExpressionType,
    pub data: KleinExpressionData,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of KleinExpression"][::std::mem::size_of::<KleinExpression>() - 64usize];
    ["Alignment of KleinExpression"][::std::mem::align_of::<KleinExpression>() - 8usize];
    ["Offset of field: KleinExpression::type_"][::std::mem::offset_of!(KleinExpression, type_) - 0usize];
    ["Offset of field: KleinExpression::data"][::std::mem::offset_of!(KleinExpression, data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct KleinExpressionList {
    pub data: *mut KleinExpression,
    pub length: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of KleinExpressionList"][::std::mem::size_of::<KleinExpressionList>() - 16usize];
    ["Alignment of KleinExpressionList"][::std::mem::align_of::<KleinExpressionList>() - 8usize];
    ["Offset of field: KleinExpressionList::data"][::std::mem::offset_of!(KleinExpressionList, data) - 0usize];
    ["Offset of field: KleinExpressionList::length"][::std::mem::offset_of!(KleinExpressionList, length) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct KleinBinaryExpression {
    pub left: KleinExpression,
    pub operation: KleinBinaryOperation,
    pub right: KleinExpression,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of KleinBinaryExpression"][::std::mem::size_of::<KleinBinaryExpression>() - 136usize];
    ["Alignment of KleinBinaryExpression"][::std::mem::align_of::<KleinBinaryExpression>() - 8usize];
    ["Offset of field: KleinBinaryExpression::left"][::std::mem::offset_of!(KleinBinaryExpression, left) - 0usize];
    ["Offset of field: KleinBinaryExpression::operation"][::std::mem::offset_of!(KleinBinaryExpression, operation) - 64usize];
    ["Offset of field: KleinBinaryExpression::right"][::std::mem::offset_of!(KleinBinaryExpression, right) - 72usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union KleinUnaryOperationData {
    pub functionCall: KleinExpressionList,
    pub index: KleinExpression,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of KleinUnaryOperationData"][::std::mem::size_of::<KleinUnaryOperationData>() - 64usize];
    ["Alignment of KleinUnaryOperationData"][::std::mem::align_of::<KleinUnaryOperationData>() - 8usize];
    ["Offset of field: KleinUnaryOperationData::functionCall"][::std::mem::offset_of!(KleinUnaryOperationData, functionCall) - 0usize];
    ["Offset of field: KleinUnaryOperationData::index"][::std::mem::offset_of!(KleinUnaryOperationData, index) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct KleinUnaryOperation {
    pub data: KleinUnaryOperationData,
    pub type_: KleinUnaryOperationType,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of KleinUnaryOperation"][::std::mem::size_of::<KleinUnaryOperation>() - 72usize];
    ["Alignment of KleinUnaryOperation"][::std::mem::align_of::<KleinUnaryOperation>() - 8usize];
    ["Offset of field: KleinUnaryOperation::data"][::std::mem::offset_of!(KleinUnaryOperation, data) - 0usize];
    ["Offset of field: KleinUnaryOperation::type_"][::std::mem::offset_of!(KleinUnaryOperation, type_) - 64usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct KleinUnaryExpression {
    pub expression: KleinExpression,
    pub operation: KleinUnaryOperation,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of KleinUnaryExpression"][::std::mem::size_of::<KleinUnaryExpression>() - 136usize];
    ["Alignment of KleinUnaryExpression"][::std::mem::align_of::<KleinUnaryExpression>() - 8usize];
    ["Offset of field: KleinUnaryExpression::expression"][::std::mem::offset_of!(KleinUnaryExpression, expression) - 0usize];
    ["Offset of field: KleinUnaryExpression::operation"][::std::mem::offset_of!(KleinUnaryExpression, operation) - 64usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct KleinField {
    pub name: *mut ::std::os::raw::c_char,
    pub value: KleinExpression,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of KleinField"][::std::mem::size_of::<KleinField>() - 72usize];
    ["Alignment of KleinField"][::std::mem::align_of::<KleinField>() - 8usize];
    ["Offset of field: KleinField::name"][::std::mem::offset_of!(KleinField, name) - 0usize];
    ["Offset of field: KleinField::value"][::std::mem::offset_of!(KleinField, value) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct KleinFieldList {
    pub data: *mut KleinField,
    pub length: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of KleinFieldList"][::std::mem::size_of::<KleinFieldList>() - 16usize];
    ["Alignment of KleinFieldList"][::std::mem::align_of::<KleinFieldList>() - 8usize];
    ["Offset of field: KleinFieldList::data"][::std::mem::offset_of!(KleinFieldList, data) - 0usize];
    ["Offset of field: KleinFieldList::length"][::std::mem::offset_of!(KleinFieldList, length) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct KleinObject {
    pub fields: KleinFieldList,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of KleinObject"][::std::mem::size_of::<KleinObject>() - 16usize];
    ["Alignment of KleinObject"][::std::mem::align_of::<KleinObject>() - 8usize];
    ["Offset of field: KleinObject::fields"][::std::mem::offset_of!(KleinObject, fields) - 0usize];
};
pub const KleinStatementType_STATEMENT_DECLARATION: KleinStatementType = 0;
pub const KleinStatementType_STATEMENT_EXPRESSION: KleinStatementType = 1;
pub const KleinStatementType_STATEMENT_RETURN: KleinStatementType = 2;
pub type KleinStatementType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct KleinDeclaration {
    pub name: *mut ::std::os::raw::c_char,
    pub type_: *mut KleinType,
    pub value: KleinExpression,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of KleinDeclaration"][::std::mem::size_of::<KleinDeclaration>() - 80usize];
    ["Alignment of KleinDeclaration"][::std::mem::align_of::<KleinDeclaration>() - 8usize];
    ["Offset of field: KleinDeclaration::name"][::std::mem::offset_of!(KleinDeclaration, name) - 0usize];
    ["Offset of field: KleinDeclaration::type_"][::std::mem::offset_of!(KleinDeclaration, type_) - 8usize];
    ["Offset of field: KleinDeclaration::value"][::std::mem::offset_of!(KleinDeclaration, value) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union KleinStatementData {
    pub declaration: KleinDeclaration,
    pub expression: KleinExpression,
    pub returnExpression: KleinExpression,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of KleinStatementData"][::std::mem::size_of::<KleinStatementData>() - 80usize];
    ["Alignment of KleinStatementData"][::std::mem::align_of::<KleinStatementData>() - 8usize];
    ["Offset of field: KleinStatementData::declaration"][::std::mem::offset_of!(KleinStatementData, declaration) - 0usize];
    ["Offset of field: KleinStatementData::expression"][::std::mem::offset_of!(KleinStatementData, expression) - 0usize];
    ["Offset of field: KleinStatementData::returnExpression"][::std::mem::offset_of!(KleinStatementData, returnExpression) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct KleinStatement {
    pub data: KleinStatementData,
    pub type_: KleinStatementType,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of KleinStatement"][::std::mem::size_of::<KleinStatement>() - 88usize];
    ["Alignment of KleinStatement"][::std::mem::align_of::<KleinStatement>() - 8usize];
    ["Offset of field: KleinStatement::data"][::std::mem::offset_of!(KleinStatement, data) - 0usize];
    ["Offset of field: KleinStatement::type_"][::std::mem::offset_of!(KleinStatement, type_) - 80usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct KleinStatementList {
    pub data: *mut KleinStatement,
    pub length: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of KleinStatementList"][::std::mem::size_of::<KleinStatementList>() - 16usize];
    ["Alignment of KleinStatementList"][::std::mem::align_of::<KleinStatementList>() - 8usize];
    ["Offset of field: KleinStatementList::data"][::std::mem::offset_of!(KleinStatementList, data) - 0usize];
    ["Offset of field: KleinStatementList::length"][::std::mem::offset_of!(KleinStatementList, length) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BinaryOperator {
    pub precedent: *mut BinaryOperator,
    pub tokenTypes: *mut KleinTokenType,
    pub tokenTypeCount: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of BinaryOperator"][::std::mem::size_of::<BinaryOperator>() - 24usize];
    ["Alignment of BinaryOperator"][::std::mem::align_of::<BinaryOperator>() - 8usize];
    ["Offset of field: BinaryOperator::precedent"][::std::mem::offset_of!(BinaryOperator, precedent) - 0usize];
    ["Offset of field: BinaryOperator::tokenTypes"][::std::mem::offset_of!(BinaryOperator, tokenTypes) - 8usize];
    ["Offset of field: BinaryOperator::tokenTypeCount"][::std::mem::offset_of!(BinaryOperator, tokenTypeCount) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ForLoop {
    pub binding: *mut ::std::os::raw::c_char,
    pub list: KleinExpression,
    pub body: KleinBlock,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ForLoop"][::std::mem::size_of::<ForLoop>() - 80usize];
    ["Alignment of ForLoop"][::std::mem::align_of::<ForLoop>() - 8usize];
    ["Offset of field: ForLoop::binding"][::std::mem::offset_of!(ForLoop, binding) - 0usize];
    ["Offset of field: ForLoop::list"][::std::mem::offset_of!(ForLoop, list) - 8usize];
    ["Offset of field: ForLoop::body"][::std::mem::offset_of!(ForLoop, body) - 72usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct KleinWhileLoop {
    pub condition: KleinExpression,
    pub body: KleinBlock,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of KleinWhileLoop"][::std::mem::size_of::<KleinWhileLoop>() - 72usize];
    ["Alignment of KleinWhileLoop"][::std::mem::align_of::<KleinWhileLoop>() - 8usize];
    ["Offset of field: KleinWhileLoop::condition"][::std::mem::offset_of!(KleinWhileLoop, condition) - 0usize];
    ["Offset of field: KleinWhileLoop::body"][::std::mem::offset_of!(KleinWhileLoop, body) - 64usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct KleinIfExpression {
    pub condition: KleinExpression,
    pub body: KleinBlock,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of KleinIfExpression"][::std::mem::size_of::<KleinIfExpression>() - 72usize];
    ["Alignment of KleinIfExpression"][::std::mem::align_of::<KleinIfExpression>() - 8usize];
    ["Offset of field: KleinIfExpression::condition"][::std::mem::offset_of!(KleinIfExpression, condition) - 0usize];
    ["Offset of field: KleinIfExpression::body"][::std::mem::offset_of!(KleinIfExpression, body) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct KleinIfExpressionList {
    pub data: *mut KleinIfExpression,
    pub length: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of KleinIfExpressionList"][::std::mem::size_of::<KleinIfExpressionList>() - 16usize];
    ["Alignment of KleinIfExpressionList"][::std::mem::align_of::<KleinIfExpressionList>() - 8usize];
    ["Offset of field: KleinIfExpressionList::data"][::std::mem::offset_of!(KleinIfExpressionList, data) - 0usize];
    ["Offset of field: KleinIfExpressionList::length"][::std::mem::offset_of!(KleinIfExpressionList, length) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct KleinProgram {
    pub statements: KleinStatementList,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of KleinProgram"][::std::mem::size_of::<KleinProgram>() - 16usize];
    ["Alignment of KleinProgram"][::std::mem::align_of::<KleinProgram>() - 8usize];
    ["Offset of field: KleinProgram::statements"][::std::mem::offset_of!(KleinProgram, statements) - 0usize];
};
#[doc = " A program's abstract syntax tree."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Program {
    #[doc = " The statements in the program. The elements in this list are of type `Statement`."]
    pub statements: KleinStatementList,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Program"][::std::mem::size_of::<Program>() - 16usize];
    ["Alignment of Program"][::std::mem::align_of::<Program>() - 8usize];
    ["Offset of field: Program::statements"][::std::mem::offset_of!(Program, statements) - 0usize];
};
unsafe extern "C" {
    pub fn tokenizeKlein(sourceCode: *const ::std::os::raw::c_char, output: *mut KleinTokenList) -> KleinResult;
}
unsafe extern "C" {
    pub fn parseKlein(sourceCode: *const ::std::os::raw::c_char, output: *mut KleinProgram) -> KleinResult;
}
unsafe extern "C" {
    pub fn parseKleinExpression(sourceCode: *const ::std::os::raw::c_char, output: *mut KleinExpression) -> KleinResult;
}
unsafe extern "C" {
    pub fn runKlein(sourceCode: *const ::std::os::raw::c_char) -> KleinResult;
}
